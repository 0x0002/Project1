#include "Precompiled.h"
#include "Vector2.h"
#include <iostream>			// ostream
#include <cmath>			// square root
#include "Vector3.h"		// 3d vector
#include "Vector4.h"		// 4d vector
#include "Matrix22.h"       // 2x2 matrix

/*------------------------------------------------------------------------------
copy constructor
------------------------------------------------------------------------------*/
Vector2::Vector2( Vector2 const &v ) :
	x( v.x ), y( v.y ) {
}

/*------------------------------------------------------------------------------
conversion constructor
------------------------------------------------------------------------------*/
Vector2::Vector2( Vector3 const &v ) :
	x( v.x ), y( v.y ) {
}

/*------------------------------------------------------------------------------
conversion constructor
------------------------------------------------------------------------------*/
Vector2::Vector2( Vector4 const &v ) :
	x( v.x ), y( v.y ) {
}

/*------------------------------------------------------------------------------
conversion constructor
------------------------------------------------------------------------------*/
Vector2::Vector2( float const *f  ) {
	*this = *(Vector2 const*)f;
}

/*------------------------------------------------------------------------------
constructor
------------------------------------------------------------------------------*/
Vector2::Vector2( float x, float y) :
	x( x ), y( y ) {
}

/*------------------------------------------------------------------------------
casting operator
------------------------------------------------------------------------------*/
Vector2::operator float*() {
	return (float*)this;
}

/*------------------------------------------------------------------------------
casting operator
------------------------------------------------------------------------------*/
Vector2::operator float const*() const {
	return (float const*)this;
}

/*------------------------------------------------------------------------------
assignment operator
------------------------------------------------------------------------------*/
Vector2& Vector2::operator+=( Vector2 const &v ) {
	x += v.x;
	y += v.y;
	return *this;
}

/*------------------------------------------------------------------------------
assignment operator
------------------------------------------------------------------------------*/
Vector2& Vector2::operator-=( Vector2 const &v ) {
	x -= v.x;
	y -= v.y;
	return *this;
}

/*------------------------------------------------------------------------------
assignment operator
------------------------------------------------------------------------------*/
Vector2& Vector2::operator*=( Matrix22 const &m) {
	*this = *this * m;
	return *this;
}

/*------------------------------------------------------------------------------
assignment operator
------------------------------------------------------------------------------*/
Vector2& Vector2::operator*=( float f ) {
	x *= f;
	y *= f;
	return *this;
}

/*------------------------------------------------------------------------------
assignment operator
------------------------------------------------------------------------------*/
Vector2& Vector2::operator/=( float f ) {
	float fInv = 1.0f / f;
	x *= fInv;
	y *= fInv;
	return *this;
}

/*------------------------------------------------------------------------------
unary operator
------------------------------------------------------------------------------*/
Vector2 Vector2::operator+() const {
	return Vector2( *this );
}

/*------------------------------------------------------------------------------
unary operator
------------------------------------------------------------------------------*/
Vector2 Vector2::operator-() const {
	return Vector2( -x, -y );
}

/*------------------------------------------------------------------------------
binary operator
------------------------------------------------------------------------------*/
Vector2 Vector2::operator+( Vector2 const &v ) const {
	return Vector2( x + v.x, y + v.y );
}

/*------------------------------------------------------------------------------
binary operator
------------------------------------------------------------------------------*/
Vector2 Vector2::operator-( Vector2 const &v ) const {
	return Vector2( x - v.x, y - v.y );
}

/*------------------------------------------------------------------------------
binary operator
------------------------------------------------------------------------------*/
Vector2 Vector2::operator*( Matrix22 const &m ) const {
	return Vector2( x * m.m._00 + y * m.m._10,
				    x * m.m._01 + y * m.m._11 );
}

/*------------------------------------------------------------------------------
binary operator
------------------------------------------------------------------------------*/
Vector2 Vector2::operator*( float f ) const {
	return Vector2( x * f, y * f );
}

/*------------------------------------------------------------------------------
binary operator
------------------------------------------------------------------------------*/
Vector2 Vector2::operator/( float f ) const {
	float fInv = 1.0f / f;
	return Vector2( x * fInv, y * fInv );
}

/*------------------------------------------------------------------------------
friend binary operator
------------------------------------------------------------------------------*/
Vector2 operator*( float f, Vector2 const &v ) {
	return Vector2( v.x * f, v.y * f );
}

/*------------------------------------------------------------------------------
comparison operator
------------------------------------------------------------------------------*/
bool Vector2::operator==( Vector2 const &v ) const {
	return x == v.x && y == v.y;
}

/*------------------------------------------------------------------------------
comparison operator
------------------------------------------------------------------------------*/
bool Vector2::operator!=( Vector2 const &v ) const {
	return x != v.x || y != v.y;
}

/*------------------------------------------------------------------------------
stream operator
------------------------------------------------------------------------------*/
std::ostream& operator<<( std::ostream &os, Vector2 const &v ) {
	os << "(" << v.x << ", " << v.y << ")";
	return os;
}

/*------------------------------------------------------------------------------
negate all components
------------------------------------------------------------------------------*/
Vector2& Vector2::Negate() {
	x = -x;
	y = -y;
	return *this;
}

/*------------------------------------------------------------------------------
set all components to zero
------------------------------------------------------------------------------*/
Vector2& Vector2::Clear() {
	x = y = 0;
	return *this;
}

/*------------------------------------------------------------------------------
vector's magnitude
------------------------------------------------------------------------------*/
float Vector2::Length() const {
	return sqrtf( x * x + y * y );
}

/*------------------------------------------------------------------------------
vector's magnitude squared
------------------------------------------------------------------------------*/
float Vector2::LengthSquared() const {
	return x * x + y * y;
}

/*------------------------------------------------------------------------------
normalize the vector
------------------------------------------------------------------------------*/
Vector2& Vector2::Normalize() {
	if( x != 0 || y != 0 ) *this /= Length();
    else *this = Vector2( 0, 0 );
	return *this;
}

/*------------------------------------------------------------------------------
set this to the component-wise product
------------------------------------------------------------------------------*/
Vector2& Vector2::ComponentProductUpdate( Vector2 const &v ) {
	x *= v.x;
	y *= v.y;
	return *this;
}

/*------------------------------------------------------------------------------
returns the angle representation in radian
------------------------------------------------------------------------------*/
float Vector2::ToAngle() const {
    return atan2f( y, x );
}

/*------------------------------------------------------------------------------
returns the angle representation in radian, opposite hand
------------------------------------------------------------------------------*/
float Vector2::ToAngle2() const {
    return atan2f( x, y );
}

/*------------------------------------------------------------------------------
normalize a vector
------------------------------------------------------------------------------*/
Vector2 Normalize( Vector2 const &v ) {
	return Vector2( v ).Normalize();
}

/*------------------------------------------------------------------------------
dot product
------------------------------------------------------------------------------*/
float Dot( Vector2 const &a, Vector2 const &b ) {
	return a.x * b.x + a.y * b.y;
}

/*------------------------------------------------------------------------------
component-wise product
------------------------------------------------------------------------------*/
Vector2 ComponentProduct( Vector2 const &a, Vector2 const &b ) {
	return Vector2( a.x * b.x,
				    a.y * b.y );
}

/*------------------------------------------------------------------------------
length of a vector
------------------------------------------------------------------------------*/
float Length( Vector2 const &v ) {
	return v.Length();
}
 
/*------------------------------------------------------------------------------
length of a vector squared
------------------------------------------------------------------------------*/
float LengthSquared( Vector2 const &v ) {
	return v.LengthSquared();
}

/*------------------------------------------------------------------------------
find an orthogonal vector
------------------------------------------------------------------------------*/
Vector2 Orthogonal( Vector2 const &v ) {
    return Vector2( -v.y, v.x );
}
